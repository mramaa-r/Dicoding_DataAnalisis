{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "H9wADwK78DCz"
      },
      "source": [
        "# Proyek Analisis Data: [E-Commerce Public Dataset]\n",
        "- **Nama:** Muhammad Rama Reyswara\n",
        "- **Email:** muhammadramareyswara@gmail.com\n",
        "- **ID Dicoding:** mramaa_r"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "eE0raob58DC0"
      },
      "source": [
        "## Menentukan Pertanyaan Bisnis"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GmQeQ5YF8DC0"
      },
      "source": [
        "- Apa saja produk-produk yang sering di komplain customer?\n",
        "- Seberapa sering seorang pelanggan melakukan pembelian dalam beberapa bulan terakhir?"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "H-z4QGlO8DC1"
      },
      "source": [
        "## Import Semua Packages/Library yang Digunakan"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "58i2Zjgsr4rU",
        "outputId": "b15ac699-c4e9-4cda-a434-ea0acd7cd364"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Requirement already satisfied: pandas in c:\\users\\rama\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (2.2.1)\n",
            "Requirement already satisfied: numpy<2,>=1.26.0 in c:\\users\\rama\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from pandas) (1.26.3)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in c:\\users\\rama\\appdata\\roaming\\python\\python312\\site-packages (from pandas) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in c:\\users\\rama\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from pandas) (2024.1)\n",
            "Requirement already satisfied: tzdata>=2022.7 in c:\\users\\rama\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from pandas) (2023.4)\n",
            "Requirement already satisfied: six>=1.5 in c:\\users\\rama\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from python-dateutil>=2.8.2->pandas) (1.16.0)\n",
            "Note: you may need to restart the kernel to use updated packages.\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "\n",
            "[notice] A new release of pip is available: 24.0 -> 24.2\n",
            "[notice] To update, run: python.exe -m pip install --upgrade pip\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Requirement already satisfied: numpy in c:\\users\\rama\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (1.26.3)\n",
            "Note: you may need to restart the kernel to use updated packages.\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "\n",
            "[notice] A new release of pip is available: 24.0 -> 24.2\n",
            "[notice] To update, run: python.exe -m pip install --upgrade pip\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Requirement already satisfied: matplotlib in c:\\users\\rama\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (3.8.3)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in c:\\users\\rama\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from matplotlib) (1.2.0)\n",
            "Requirement already satisfied: cycler>=0.10 in c:\\users\\rama\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from matplotlib) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in c:\\users\\rama\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from matplotlib) (4.49.0)\n",
            "Requirement already satisfied: kiwisolver>=1.3.1 in c:\\users\\rama\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from matplotlib) (1.4.5)\n",
            "Requirement already satisfied: numpy<2,>=1.21 in c:\\users\\rama\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from matplotlib) (1.26.3)\n",
            "Requirement already satisfied: packaging>=20.0 in c:\\users\\rama\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from matplotlib) (23.2)\n",
            "Requirement already satisfied: pillow>=8 in c:\\users\\rama\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from matplotlib) (10.2.0)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in c:\\users\\rama\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from matplotlib) (3.1.1)\n",
            "Requirement already satisfied: python-dateutil>=2.7 in c:\\users\\rama\\appdata\\roaming\\python\\python312\\site-packages (from matplotlib) (2.8.2)\n",
            "Requirement already satisfied: six>=1.5 in c:\\users\\rama\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from python-dateutil>=2.7->matplotlib) (1.16.0)\n",
            "Note: you may need to restart the kernel to use updated packages.\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "\n",
            "[notice] A new release of pip is available: 24.0 -> 24.2\n",
            "[notice] To update, run: python.exe -m pip install --upgrade pip\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Requirement already satisfied: seaborn in c:\\users\\rama\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (0.13.2)\n",
            "Requirement already satisfied: numpy!=1.24.0,>=1.20 in c:\\users\\rama\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from seaborn) (1.26.3)\n",
            "Requirement already satisfied: pandas>=1.2 in c:\\users\\rama\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from seaborn) (2.2.1)\n",
            "Requirement already satisfied: matplotlib!=3.6.1,>=3.4 in c:\\users\\rama\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from seaborn) (3.8.3)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in c:\\users\\rama\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (1.2.0)\n",
            "Requirement already satisfied: cycler>=0.10 in c:\\users\\rama\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in c:\\users\\rama\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (4.49.0)\n",
            "Requirement already satisfied: kiwisolver>=1.3.1 in c:\\users\\rama\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (1.4.5)\n",
            "Requirement already satisfied: packaging>=20.0 in c:\\users\\rama\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (23.2)\n",
            "Requirement already satisfied: pillow>=8 in c:\\users\\rama\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (10.2.0)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in c:\\users\\rama\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (3.1.1)\n",
            "Requirement already satisfied: python-dateutil>=2.7 in c:\\users\\rama\\appdata\\roaming\\python\\python312\\site-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in c:\\users\\rama\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from pandas>=1.2->seaborn) (2024.1)\n",
            "Requirement already satisfied: tzdata>=2022.7 in c:\\users\\rama\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from pandas>=1.2->seaborn) (2023.4)\n",
            "Requirement already satisfied: six>=1.5 in c:\\users\\rama\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from python-dateutil>=2.7->matplotlib!=3.6.1,>=3.4->seaborn) (1.16.0)\n",
            "Note: you may need to restart the kernel to use updated packages.\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "\n",
            "[notice] A new release of pip is available: 24.0 -> 24.2\n",
            "[notice] To update, run: python.exe -m pip install --upgrade pip\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Requirement already satisfied: scikit-learn in c:\\users\\rama\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (1.5.2)\n",
            "Requirement already satisfied: numpy>=1.19.5 in c:\\users\\rama\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from scikit-learn) (1.26.3)\n",
            "Requirement already satisfied: scipy>=1.6.0 in c:\\users\\rama\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from scikit-learn) (1.11.4)\n",
            "Requirement already satisfied: joblib>=1.2.0 in c:\\users\\rama\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from scikit-learn) (1.3.2)\n",
            "Requirement already satisfied: threadpoolctl>=3.1.0 in c:\\users\\rama\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from scikit-learn) (3.5.0)\n",
            "Note: you may need to restart the kernel to use updated packages.\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "\n",
            "[notice] A new release of pip is available: 24.0 -> 24.2\n",
            "[notice] To update, run: python.exe -m pip install --upgrade pip\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Collecting streamlitNote: you may need to restart the kernel to use updated packages.\n",
            "\n",
            "  Using cached streamlit-1.39.0-py2.py3-none-any.whl.metadata (8.5 kB)\n",
            "Collecting altair<6,>=4.0 (from streamlit)\n",
            "  Using cached altair-5.4.1-py3-none-any.whl.metadata (9.4 kB)\n",
            "Requirement already satisfied: blinker<2,>=1.0.0 in c:\\users\\rama\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from streamlit) (1.8.2)\n",
            "Collecting cachetools<6,>=4.0 (from streamlit)\n",
            "  Using cached cachetools-5.5.0-py3-none-any.whl.metadata (5.3 kB)\n",
            "Requirement already satisfied: click<9,>=7.0 in c:\\users\\rama\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from streamlit) (8.1.7)\n",
            "Requirement already satisfied: numpy<3,>=1.20 in c:\\users\\rama\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from streamlit) (1.26.3)\n",
            "Requirement already satisfied: packaging<25,>=20 in c:\\users\\rama\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from streamlit) (23.2)\n",
            "Requirement already satisfied: pandas<3,>=1.4.0 in c:\\users\\rama\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from streamlit) (2.2.1)\n",
            "Requirement already satisfied: pillow<11,>=7.1.0 in c:\\users\\rama\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from streamlit) (10.2.0)\n",
            "Collecting protobuf<6,>=3.20 (from streamlit)\n",
            "  Downloading protobuf-5.28.2-cp310-abi3-win_amd64.whl.metadata (592 bytes)\n",
            "Collecting pyarrow>=7.0 (from streamlit)\n",
            "  Downloading pyarrow-17.0.0-cp312-cp312-win_amd64.whl.metadata (3.4 kB)\n",
            "Requirement already satisfied: requests<3,>=2.27 in c:\\users\\rama\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from streamlit) (2.31.0)\n",
            "Requirement already satisfied: rich<14,>=10.14.0 in c:\\users\\rama\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from streamlit) (13.7.1)\n",
            "Collecting tenacity<10,>=8.1.0 (from streamlit)\n",
            "  Using cached tenacity-9.0.0-py3-none-any.whl.metadata (1.2 kB)\n",
            "Collecting toml<2,>=0.10.1 (from streamlit)\n",
            "  Using cached toml-0.10.2-py2.py3-none-any.whl.metadata (7.1 kB)\n",
            "Requirement already satisfied: typing-extensions<5,>=4.3.0 in c:\\users\\rama\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from streamlit) (4.9.0)\n",
            "Collecting gitpython!=3.1.19,<4,>=3.0.7 (from streamlit)\n",
            "  Using cached GitPython-3.1.43-py3-none-any.whl.metadata (13 kB)\n",
            "Collecting pydeck<1,>=0.8.0b4 (from streamlit)\n",
            "  Using cached pydeck-0.9.1-py2.py3-none-any.whl.metadata (4.1 kB)\n",
            "Requirement already satisfied: tornado<7,>=6.0.3 in c:\\users\\rama\\appdata\\roaming\\python\\python312\\site-packages (from streamlit) (6.4)\n",
            "Collecting watchdog<6,>=2.1.5 (from streamlit)\n",
            "  Using cached watchdog-5.0.3-py3-none-win_amd64.whl.metadata (41 kB)\n",
            "Requirement already satisfied: jinja2 in c:\\users\\rama\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from altair<6,>=4.0->streamlit) (3.1.4)\n",
            "Collecting jsonschema>=3.0 (from altair<6,>=4.0->streamlit)\n",
            "  Using cached jsonschema-4.23.0-py3-none-any.whl.metadata (7.9 kB)\n",
            "Collecting narwhals>=1.5.2 (from altair<6,>=4.0->streamlit)\n",
            "  Using cached narwhals-1.9.0-py3-none-any.whl.metadata (6.8 kB)\n",
            "Collecting typing-extensions<5,>=4.3.0 (from streamlit)\n",
            "  Downloading typing_extensions-4.12.2-py3-none-any.whl.metadata (3.0 kB)\n",
            "Requirement already satisfied: colorama in c:\\users\\rama\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from click<9,>=7.0->streamlit) (0.4.6)\n",
            "Collecting gitdb<5,>=4.0.1 (from gitpython!=3.1.19,<4,>=3.0.7->streamlit)\n",
            "  Using cached gitdb-4.0.11-py3-none-any.whl.metadata (1.2 kB)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in c:\\users\\rama\\appdata\\roaming\\python\\python312\\site-packages (from pandas<3,>=1.4.0->streamlit) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in c:\\users\\rama\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from pandas<3,>=1.4.0->streamlit) (2024.1)\n",
            "Requirement already satisfied: tzdata>=2022.7 in c:\\users\\rama\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from pandas<3,>=1.4.0->streamlit) (2023.4)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in c:\\users\\rama\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from requests<3,>=2.27->streamlit) (3.3.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in c:\\users\\rama\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from requests<3,>=2.27->streamlit) (3.6)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in c:\\users\\rama\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from requests<3,>=2.27->streamlit) (2.1.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in c:\\users\\rama\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from requests<3,>=2.27->streamlit) (2023.11.17)\n",
            "Requirement already satisfied: markdown-it-py>=2.2.0 in c:\\users\\rama\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from rich<14,>=10.14.0->streamlit) (3.0.0)\n",
            "Requirement already satisfied: pygments<3.0.0,>=2.13.0 in c:\\users\\rama\\appdata\\roaming\\python\\python312\\site-packages (from rich<14,>=10.14.0->streamlit) (2.17.2)\n",
            "Collecting smmap<6,>=3.0.1 (from gitdb<5,>=4.0.1->gitpython!=3.1.19,<4,>=3.0.7->streamlit)\n",
            "  Using cached smmap-5.0.1-py3-none-any.whl.metadata (4.3 kB)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in c:\\users\\rama\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from jinja2->altair<6,>=4.0->streamlit) (2.1.5)\n",
            "Collecting attrs>=22.2.0 (from jsonschema>=3.0->altair<6,>=4.0->streamlit)\n",
            "  Using cached attrs-24.2.0-py3-none-any.whl.metadata (11 kB)\n",
            "Collecting jsonschema-specifications>=2023.03.6 (from jsonschema>=3.0->altair<6,>=4.0->streamlit)\n",
            "  Using cached jsonschema_specifications-2023.12.1-py3-none-any.whl.metadata (3.0 kB)\n",
            "Collecting referencing>=0.28.4 (from jsonschema>=3.0->altair<6,>=4.0->streamlit)\n",
            "  Using cached referencing-0.35.1-py3-none-any.whl.metadata (2.8 kB)\n",
            "Collecting rpds-py>=0.7.1 (from jsonschema>=3.0->altair<6,>=4.0->streamlit)\n",
            "  Downloading rpds_py-0.20.0-cp312-none-win_amd64.whl.metadata (4.2 kB)\n",
            "Requirement already satisfied: mdurl~=0.1 in c:\\users\\rama\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from markdown-it-py>=2.2.0->rich<14,>=10.14.0->streamlit) (0.1.2)\n",
            "Requirement already satisfied: six>=1.5 in c:\\users\\rama\\appdata\\local\\programs\\python\\python312\\lib\\site-packages (from python-dateutil>=2.8.2->pandas<3,>=1.4.0->streamlit) (1.16.0)\n",
            "Using cached streamlit-1.39.0-py2.py3-none-any.whl (8.7 MB)\n",
            "Using cached altair-5.4.1-py3-none-any.whl (658 kB)\n",
            "Using cached cachetools-5.5.0-py3-none-any.whl (9.5 kB)\n",
            "Using cached GitPython-3.1.43-py3-none-any.whl (207 kB)\n",
            "Downloading protobuf-5.28.2-cp310-abi3-win_amd64.whl (431 kB)\n",
            "   ---------------------------------------- 0.0/431.5 kB ? eta -:--:--\n",
            "   ----- ---------------------------------- 61.4/431.5 kB 1.7 MB/s eta 0:00:01\n",
            "   ---------------------------- ----------- 307.2/431.5 kB 4.8 MB/s eta 0:00:01\n",
            "   ---------------------------------------- 431.5/431.5 kB 5.4 MB/s eta 0:00:00\n",
            "Downloading pyarrow-17.0.0-cp312-cp312-win_amd64.whl (25.1 MB)\n",
            "   ---------------------------------------- 0.0/25.1 MB ? eta -:--:--\n",
            "    --------------------------------------- 0.5/25.1 MB 14.2 MB/s eta 0:00:02\n",
            "   - -------------------------------------- 0.8/25.1 MB 13.5 MB/s eta 0:00:02\n",
            "   -- ------------------------------------- 1.3/25.1 MB 13.3 MB/s eta 0:00:02\n",
            "   -- ------------------------------------- 1.7/25.1 MB 12.2 MB/s eta 0:00:02\n",
            "   --- ------------------------------------ 2.1/25.1 MB 12.3 MB/s eta 0:00:02\n",
            "   ---- ----------------------------------- 2.5/25.1 MB 12.5 MB/s eta 0:00:02\n",
            "   ---- ----------------------------------- 3.0/25.1 MB 12.6 MB/s eta 0:00:02\n",
            "   ----- ---------------------------------- 3.4/25.1 MB 12.1 MB/s eta 0:00:02\n",
            "   ------ --------------------------------- 3.9/25.1 MB 12.3 MB/s eta 0:00:02\n",
            "   ------ --------------------------------- 4.3/25.1 MB 12.4 MB/s eta 0:00:02\n",
            "   ------- -------------------------------- 4.7/25.1 MB 12.0 MB/s eta 0:00:02\n",
            "   -------- ------------------------------- 5.1/25.1 MB 12.2 MB/s eta 0:00:02\n",
            "   -------- ------------------------------- 5.6/25.1 MB 12.3 MB/s eta 0:00:02\n",
            "   --------- ------------------------------ 6.0/25.1 MB 12.3 MB/s eta 0:00:02\n",
            "   ---------- ----------------------------- 6.4/25.1 MB 12.1 MB/s eta 0:00:02\n",
            "   ---------- ----------------------------- 6.9/25.1 MB 12.2 MB/s eta 0:00:02\n",
            "   ----------- ---------------------------- 7.3/25.1 MB 12.3 MB/s eta 0:00:02\n",
            "   ------------ --------------------------- 7.8/25.1 MB 12.1 MB/s eta 0:00:02\n",
            "   ------------- -------------------------- 8.2/25.1 MB 12.1 MB/s eta 0:00:02\n",
            "   ------------- -------------------------- 8.5/25.1 MB 12.1 MB/s eta 0:00:02\n",
            "   -------------- ------------------------- 8.9/25.1 MB 12.2 MB/s eta 0:00:02\n",
            "   -------------- ------------------------- 9.2/25.1 MB 12.1 MB/s eta 0:00:02\n",
            "   -------------- ------------------------- 9.2/25.1 MB 12.1 MB/s eta 0:00:02\n",
            "   -------------- ------------------------- 9.2/25.1 MB 12.1 MB/s eta 0:00:02\n",
            "   ---------------- ----------------------- 10.5/25.1 MB 11.9 MB/s eta 0:00:02\n",
            "   ----------------- ---------------------- 10.9/25.1 MB 11.7 MB/s eta 0:00:02\n",
            "   ------------------ --------------------- 11.3/25.1 MB 11.7 MB/s eta 0:00:02\n",
            "   ------------------ --------------------- 11.7/25.1 MB 11.9 MB/s eta 0:00:02\n",
            "   ------------------- -------------------- 12.2/25.1 MB 11.9 MB/s eta 0:00:02\n",
            "   -------------------- ------------------- 12.6/25.1 MB 11.7 MB/s eta 0:00:02\n",
            "   -------------------- ------------------- 13.0/25.1 MB 11.7 MB/s eta 0:00:02\n",
            "   --------------------- ------------------ 13.4/25.1 MB 11.7 MB/s eta 0:00:02\n",
            "   ---------------------- ----------------- 13.8/25.1 MB 11.9 MB/s eta 0:00:01\n",
            "   ---------------------- ----------------- 14.3/25.1 MB 11.7 MB/s eta 0:00:01\n",
            "   ----------------------- ---------------- 14.7/25.1 MB 11.7 MB/s eta 0:00:01\n",
            "   ------------------------ --------------- 15.2/25.1 MB 11.9 MB/s eta 0:00:01\n",
            "   ------------------------ --------------- 15.2/25.1 MB 11.9 MB/s eta 0:00:01\n",
            "   ------------------------ --------------- 15.2/25.1 MB 11.9 MB/s eta 0:00:01\n",
            "   ------------------------- -------------- 16.2/25.1 MB 11.9 MB/s eta 0:00:01\n",
            "   -------------------------- ------------- 16.6/25.1 MB 11.5 MB/s eta 0:00:01\n",
            "   --------------------------- ------------ 17.0/25.1 MB 11.7 MB/s eta 0:00:01\n",
            "   --------------------------- ------------ 17.4/25.1 MB 11.7 MB/s eta 0:00:01\n",
            "   ---------------------------- ----------- 17.6/25.1 MB 11.3 MB/s eta 0:00:01\n",
            "   ---------------------------- ----------- 18.0/25.1 MB 11.1 MB/s eta 0:00:01\n",
            "   ----------------------------- ---------- 18.3/25.1 MB 11.1 MB/s eta 0:00:01\n",
            "   ----------------------------- ---------- 18.3/25.1 MB 11.1 MB/s eta 0:00:01\n",
            "   ----------------------------- ---------- 18.3/25.1 MB 10.2 MB/s eta 0:00:01\n",
            "   ------------------------------- -------- 19.5/25.1 MB 12.1 MB/s eta 0:00:01\n",
            "   ------------------------------- -------- 20.0/25.1 MB 11.5 MB/s eta 0:00:01\n",
            "   -------------------------------- ------- 20.4/25.1 MB 11.1 MB/s eta 0:00:01\n",
            "   --------------------------------- ------ 20.8/25.1 MB 11.3 MB/s eta 0:00:01\n",
            "   --------------------------------- ------ 21.3/25.1 MB 11.3 MB/s eta 0:00:01\n",
            "   ---------------------------------- ----- 21.7/25.1 MB 11.3 MB/s eta 0:00:01\n",
            "   ----------------------------------- ---- 22.2/25.1 MB 11.3 MB/s eta 0:00:01\n",
            "   ------------------------------------ --- 22.6/25.1 MB 11.3 MB/s eta 0:00:01\n",
            "   ------------------------------------ --- 23.0/25.1 MB 11.3 MB/s eta 0:00:01\n",
            "   ------------------------------------- -- 23.4/25.1 MB 11.3 MB/s eta 0:00:01\n",
            "   -------------------------------------- - 23.9/25.1 MB 11.3 MB/s eta 0:00:01\n",
            "   -------------------------------------- - 24.3/25.1 MB 11.5 MB/s eta 0:00:01\n",
            "   ---------------------------------------  24.7/25.1 MB 11.3 MB/s eta 0:00:01\n",
            "   ---------------------------------------  25.1/25.1 MB 11.3 MB/s eta 0:00:01\n",
            "   ---------------------------------------- 25.1/25.1 MB 11.1 MB/s eta 0:00:00\n",
            "Using cached pydeck-0.9.1-py2.py3-none-any.whl (6.9 MB)\n",
            "Using cached tenacity-9.0.0-py3-none-any.whl (28 kB)\n",
            "Using cached toml-0.10.2-py2.py3-none-any.whl (16 kB)\n",
            "Downloading typing_extensions-4.12.2-py3-none-any.whl (37 kB)\n",
            "Using cached watchdog-5.0.3-py3-none-win_amd64.whl (79 kB)\n",
            "Using cached gitdb-4.0.11-py3-none-any.whl (62 kB)\n",
            "Using cached jsonschema-4.23.0-py3-none-any.whl (88 kB)\n",
            "Using cached narwhals-1.9.0-py3-none-any.whl (178 kB)\n",
            "Using cached attrs-24.2.0-py3-none-any.whl (63 kB)\n",
            "Using cached jsonschema_specifications-2023.12.1-py3-none-any.whl (18 kB)\n",
            "Using cached referencing-0.35.1-py3-none-any.whl (26 kB)\n",
            "Downloading rpds_py-0.20.0-cp312-none-win_amd64.whl (214 kB)\n",
            "   ---------------------------------------- 0.0/214.5 kB ? eta -:--:--\n",
            "   --------------------------------------- 214.5/214.5 kB 12.8 MB/s eta 0:00:00\n",
            "Using cached smmap-5.0.1-py3-none-any.whl (24 kB)\n",
            "Installing collected packages: watchdog, typing-extensions, toml, tenacity, smmap, rpds-py, pyarrow, protobuf, narwhals, cachetools, attrs, referencing, pydeck, gitdb, jsonschema-specifications, gitpython, jsonschema, altair, streamlit\n",
            "  Attempting uninstall: typing-extensions\n",
            "    Found existing installation: typing_extensions 4.9.0\n",
            "    Uninstalling typing_extensions-4.9.0:\n",
            "      Successfully uninstalled typing_extensions-4.9.0\n",
            "Successfully installed altair-5.4.1 attrs-24.2.0 cachetools-5.5.0 gitdb-4.0.11 gitpython-3.1.43 jsonschema-4.23.0 jsonschema-specifications-2023.12.1 narwhals-1.9.0 protobuf-5.28.2 pyarrow-17.0.0 pydeck-0.9.1 referencing-0.35.1 rpds-py-0.20.0 smmap-5.0.1 streamlit-1.39.0 tenacity-9.0.0 toml-0.10.2 typing-extensions-4.12.2 watchdog-5.0.3\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "\n",
            "[notice] A new release of pip is available: 24.0 -> 24.2\n",
            "[notice] To update, run: python.exe -m pip install --upgrade pip\n"
          ]
        }
      ],
      "source": [
        "%pip install pandas\n",
        "%pip install numpy\n",
        "%pip install matplotlib\n",
        "%pip install seaborn\n",
        "%pip install scikit-learn\n",
        "%pip install streamlit"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 90,
      "metadata": {
        "id": "FVYwaObI8DC1"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.ensemble import RandomForestRegressor\n",
        "from sklearn.metrics import mean_squared_error\n",
        "from statsmodels.tsa.holtwinters import ExponentialSmoothing\n",
        "from datetime import datetime"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "h_Sh51Xy8DC1"
      },
      "source": [
        "## Data Wrangling"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "sXU2GBYu8DC1"
      },
      "source": [
        "### Gathering Data"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 85,
      "metadata": {
        "id": "zjCBk1BI8DC1"
      },
      "outputs": [],
      "source": [
        "orders = pd.read_csv('orders_dataset.csv')\n",
        "order_reviews = pd.read_csv('order_reviews_dataset.csv')\n",
        "order_items = pd.read_csv('order_items_dataset.csv')\n",
        "products = pd.read_csv('products_dataset.csv')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MMi6xGaDkbCi"
      },
      "source": [
        "**Insight:**\n",
        "Memuat Dataset - dataset yang diperlukan."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "FHSiqaZp8DC1"
      },
      "source": [
        "### Assessing Data"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 84,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ax-3tEjc9Cj1",
        "outputId": "f5a1c7c7-c809-46cf-b818-47ca417e0872"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 99441 entries, 0 to 99440\n",
            "Data columns (total 9 columns):\n",
            " #   Column                         Non-Null Count  Dtype         \n",
            "---  ------                         --------------  -----         \n",
            " 0   order_id                       99441 non-null  object        \n",
            " 1   customer_id                    99441 non-null  object        \n",
            " 2   order_status                   99441 non-null  object        \n",
            " 3   order_purchase_timestamp       99441 non-null  datetime64[ns]\n",
            " 4   order_approved_at              99281 non-null  object        \n",
            " 5   order_delivered_carrier_date   97658 non-null  object        \n",
            " 6   order_delivered_customer_date  96476 non-null  object        \n",
            " 7   order_estimated_delivery_date  99441 non-null  object        \n",
            " 8   order_purchase_month           99441 non-null  period[M]     \n",
            "dtypes: datetime64[ns](1), object(7), period[M](1)\n",
            "memory usage: 6.8+ MB\n",
            "None\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 99224 entries, 0 to 99223\n",
            "Data columns (total 7 columns):\n",
            " #   Column                   Non-Null Count  Dtype \n",
            "---  ------                   --------------  ----- \n",
            " 0   review_id                99224 non-null  object\n",
            " 1   order_id                 99224 non-null  object\n",
            " 2   review_score             99224 non-null  int64 \n",
            " 3   review_comment_title     11568 non-null  object\n",
            " 4   review_comment_message   40977 non-null  object\n",
            " 5   review_creation_date     99224 non-null  object\n",
            " 6   review_answer_timestamp  99224 non-null  object\n",
            "dtypes: int64(1), object(6)\n",
            "memory usage: 5.3+ MB\n",
            "None\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 112650 entries, 0 to 112649\n",
            "Data columns (total 7 columns):\n",
            " #   Column               Non-Null Count   Dtype  \n",
            "---  ------               --------------   -----  \n",
            " 0   order_id             112650 non-null  object \n",
            " 1   order_item_id        112650 non-null  int64  \n",
            " 2   product_id           112650 non-null  object \n",
            " 3   seller_id            112650 non-null  object \n",
            " 4   shipping_limit_date  112650 non-null  object \n",
            " 5   price                112650 non-null  float64\n",
            " 6   freight_value        112650 non-null  float64\n",
            "dtypes: float64(2), int64(1), object(4)\n",
            "memory usage: 6.0+ MB\n",
            "None\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 32951 entries, 0 to 32950\n",
            "Data columns (total 9 columns):\n",
            " #   Column                      Non-Null Count  Dtype  \n",
            "---  ------                      --------------  -----  \n",
            " 0   product_id                  32951 non-null  object \n",
            " 1   product_category_name       32341 non-null  object \n",
            " 2   product_name_lenght         32341 non-null  float64\n",
            " 3   product_description_lenght  32341 non-null  float64\n",
            " 4   product_photos_qty          32341 non-null  float64\n",
            " 5   product_weight_g            32949 non-null  float64\n",
            " 6   product_length_cm           32949 non-null  float64\n",
            " 7   product_height_cm           32949 non-null  float64\n",
            " 8   product_width_cm            32949 non-null  float64\n",
            "dtypes: float64(7), object(2)\n",
            "memory usage: 2.3+ MB\n",
            "None\n"
          ]
        }
      ],
      "source": [
        "print(orders.info())\n",
        "print(order_reviews.info())\n",
        "print(order_items.info())\n",
        "print(products.info())"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7dtxhAPrkhPL"
      },
      "source": [
        "**Insight:**\n",
        "Meng-assess beberapa row pertama pada dataset"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 83,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pzy-oWIzf6ji",
        "outputId": "25b89b23-a6b3-4731-c00e-2e325df38fc1"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "order_id                            0\n",
            "customer_id                         0\n",
            "order_status                        0\n",
            "order_purchase_timestamp            0\n",
            "order_approved_at                 160\n",
            "order_delivered_carrier_date     1783\n",
            "order_delivered_customer_date    2965\n",
            "order_estimated_delivery_date       0\n",
            "order_purchase_month                0\n",
            "dtype: int64\n",
            "review_id                      0\n",
            "order_id                       0\n",
            "review_score                   0\n",
            "review_comment_title       87656\n",
            "review_comment_message     58247\n",
            "review_creation_date           0\n",
            "review_answer_timestamp        0\n",
            "dtype: int64\n",
            "order_id               0\n",
            "order_item_id          0\n",
            "product_id             0\n",
            "seller_id              0\n",
            "shipping_limit_date    0\n",
            "price                  0\n",
            "freight_value          0\n",
            "dtype: int64\n",
            "product_id                      0\n",
            "product_category_name         610\n",
            "product_name_lenght           610\n",
            "product_description_lenght    610\n",
            "product_photos_qty            610\n",
            "product_weight_g                2\n",
            "product_length_cm               2\n",
            "product_height_cm               2\n",
            "product_width_cm                2\n",
            "dtype: int64\n"
          ]
        }
      ],
      "source": [
        "print(orders.isnull().sum())\n",
        "print(order_reviews.isnull().sum())\n",
        "print(order_items.isnull().sum())\n",
        "print(products.isnull().sum())"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NXrCL7L3gLqY"
      },
      "source": [
        "Checking untuk missing values"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "EhN5R4hr8DC1"
      },
      "source": [
        "### Cleaning Data"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 92,
      "metadata": {
        "id": "jVnYpprE9Evz"
      },
      "outputs": [],
      "source": [
        "order_reviews_cleaned = order_reviews.dropna(subset=['review_comment_message'])\n",
        "\n",
        "\n",
        "orders['order_purchase_timestamp'] = pd.to_datetime(orders['order_purchase_timestamp'])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Q_5ejIqckiSP"
      },
      "source": [
        "**Insight:**\n",
        "Melakukan metode dropping untuk missing values kolom review_comment_message karena jika data ini hilang, maka tidak ada data yang bisa digunakan untuk menjawab pertanyaan satu.\n",
        "\n",
        "Sedangakan Orders dan Products hanya membutuhkan kolom order_purchase_timestamp untuk menjawab pertanyaan. Dimana kolom ini tidak memiliki Missing Values.\n",
        "\n",
        "Dilakukan konversi kolom timestamp ke datetime agar mudah meng-extract data (dd/mm/yy) untuk dilakukan analisis data."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 81,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "I_YERrnigovy",
        "outputId": "3280ce31-4c5e-4c25-c80d-d7e575d167be"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Jumlah row setelah cleaning:  40977 \n",
            "\n",
            "                           review_id                          order_id  \\\n",
            "3   e64fb393e7b32834bb789ff8bb30750e  658677c97b385a9be170737859d3511b   \n",
            "4   f7c4243c7fe1938f181bec41a392bdeb  8e6bfb81e283fa7e4f11123a3fb894f1   \n",
            "9   8670d52e15e00043ae7de4c01cc2fe06  b9bf720beb4ab3728760088589c62129   \n",
            "12  4b49719c8a200003f700d3d986ea1a19  9d6f15f95d01e79bd1349cc208361f09   \n",
            "15  3948b09f7c818e2d86c9a546758b2335  e51478e7e277a83743b6f9991dbfa3fb   \n",
            "\n",
            "    review_score review_comment_title  \\\n",
            "3              5                  NaN   \n",
            "4              5                  NaN   \n",
            "9              4            recomendo   \n",
            "12             4                  NaN   \n",
            "15             5      Super recomendo   \n",
            "\n",
            "                               review_comment_message review_creation_date  \\\n",
            "3               Recebi bem antes do prazo estipulado.  2017-04-21 00:00:00   \n",
            "4   Parabéns lojas lannister adorei comprar pela I...  2018-03-01 00:00:00   \n",
            "9   aparelho eficiente. no site a marca do aparelh...  2018-05-22 00:00:00   \n",
            "12    Mas um pouco ,travando...pelo valor ta Boa.\\r\\n  2018-02-16 00:00:00   \n",
            "15  Vendedor confiável, produto ok e entrega antes...  2018-05-23 00:00:00   \n",
            "\n",
            "   review_answer_timestamp  \n",
            "3      2017-04-21 22:02:06  \n",
            "4      2018-03-02 10:26:53  \n",
            "9      2018-05-23 16:45:47  \n",
            "12     2018-02-20 10:52:22  \n",
            "15     2018-05-24 03:00:01  \n"
          ]
        }
      ],
      "source": [
        "print(\"Jumlah row setelah cleaning: \", len(order_reviews_cleaned), '\\n')\n",
        "print(order_reviews_cleaned.head())"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9pCNc0ZRjU5p"
      },
      "source": [
        "Menampilkan hasil setelah data cleaning."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gp-Y6wU38DC1"
      },
      "source": [
        "## Exploratory Data Analysis (EDA)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MW7WF2kr8DC1"
      },
      "source": [
        "### Explore ..."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 80,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "e9CQCZjk8DC2",
        "outputId": "d7f6fb21-7a6a-4210-f8e9-e35cd1fb03a1"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "       review_score\n",
            "count  99224.000000\n",
            "mean       4.086421\n",
            "std        1.347579\n",
            "min        1.000000\n",
            "25%        4.000000\n",
            "50%        5.000000\n",
            "75%        5.000000\n",
            "max        5.000000\n",
            "review_score\n",
            "5    57328\n",
            "4    19142\n",
            "1    11424\n",
            "3     8179\n",
            "2     3151\n",
            "Name: count, dtype: int64\n",
            "\n",
            "Products\n",
            "       product_name_lenght  product_description_lenght  product_photos_qty  \\\n",
            "count         32341.000000                32341.000000        32341.000000   \n",
            "mean             48.476949                  771.495285            2.188986   \n",
            "std              10.245741                  635.115225            1.736766   \n",
            "min               5.000000                    4.000000            1.000000   \n",
            "25%              42.000000                  339.000000            1.000000   \n",
            "50%              51.000000                  595.000000            1.000000   \n",
            "75%              57.000000                  972.000000            3.000000   \n",
            "max              76.000000                 3992.000000           20.000000   \n",
            "\n",
            "       product_weight_g  product_length_cm  product_height_cm  \\\n",
            "count      32949.000000       32949.000000       32949.000000   \n",
            "mean        2276.472488          30.815078          16.937661   \n",
            "std         4282.038731          16.914458          13.637554   \n",
            "min            0.000000           7.000000           2.000000   \n",
            "25%          300.000000          18.000000           8.000000   \n",
            "50%          700.000000          25.000000          13.000000   \n",
            "75%         1900.000000          38.000000          21.000000   \n",
            "max        40425.000000         105.000000         105.000000   \n",
            "\n",
            "       product_width_cm  \n",
            "count      32949.000000  \n",
            "mean          23.196728  \n",
            "std           12.079047  \n",
            "min            6.000000  \n",
            "25%           15.000000  \n",
            "50%           20.000000  \n",
            "75%           30.000000  \n",
            "max          118.000000  \n",
            "product_category_name\n",
            "cama_mesa_banho           3029\n",
            "esporte_lazer             2867\n",
            "moveis_decoracao          2657\n",
            "beleza_saude              2444\n",
            "utilidades_domesticas     2335\n",
            "automotivo                1900\n",
            "informatica_acessorios    1639\n",
            "brinquedos                1411\n",
            "relogios_presentes        1329\n",
            "telefonia                 1134\n",
            "Name: count, dtype: int64\n",
            "\n",
            " Jarak antar transaksi\n",
            "Transaksi pertama: 2016-09-04 21:15:19\n",
            "Transaksi terbaru: 2018-10-17 17:30:18\n"
          ]
        }
      ],
      "source": [
        "#EDA\n",
        "print(order_reviews.describe())\n",
        "print(order_reviews['review_score'].value_counts()) #Melihat persebaran data review\n",
        "\n",
        "print(\"\\nProducts\")\n",
        "print(products.describe())\n",
        "print(products['product_category_name'].value_counts().head(10))  # 10 category barang yang sering dibeli\n",
        "\n",
        "# Melihat jarak (timespan) antar transaksi\n",
        "print(\"\\n Jarak antar transaksi\")\n",
        "print(f\"Transaksi pertama: {orders['order_purchase_timestamp'].min()}\")\n",
        "print(f\"Transaksi terbaru: {orders['order_purchase_timestamp'].max()}\")\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "th_Lzl2Fkj9O"
      },
      "source": [
        "**Insight:**\n",
        "- Menggunakan method describe() untuk menampilkan statistik.\n",
        "- Jangka waktu pesanan dari data pembelian pertama sampai terbaru dihitung untuk mendapatkan insight tentang jangka waktu (timespan) dataset."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zsyZjqak8DC2"
      },
      "source": [
        "## Visualization & Explanatory Analysis"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HZxOiQ6n8DC2"
      },
      "source": [
        "### Pertanyaan 1:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 79,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "id": "1swJUdAD8DC2",
        "outputId": "ddc2202d-a91c-403d-c690-86f45fd86061"
      },
      "outputs": [
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# Merge order_reviews dengan orders\n",
        "komplain = pd.merge(order_reviews_cleaned, orders, on='order_id', how='inner')\n",
        "\n",
        "# Merge komplain dengan order_items buat memanggil product_id\n",
        "komplain = pd.merge(komplain, order_items, on='order_id', how='inner')\n",
        "\n",
        "# Merge komplain dengan products buat memanggil deskripsi product\n",
        "komplain = pd.merge(komplain, products, on='product_id', how='inner')\n",
        "\n",
        "# Melakukan groupby untuk komplain rendah dengan benchmark (dibawah atau samadengan 2)\n",
        "komplain['is_komplain'] = komplain['review_score'] <= 2\n",
        "komplain_produk = komplain[komplain['is_komplain']].groupby('product_id').size().reset_index(name='complaints_count')\n",
        "\n",
        "# Merge dengan produk untuk memanggil nama produk\n",
        "komplain_produk = pd.merge(komplain_produk, products[['product_id', 'product_category_name']], on='product_id', how='inner')\n",
        "\n",
        "# sort produk berdasarkan komplain\n",
        "komplain_produk_sorted = komplain_produk.sort_values(by='complaints_count', ascending=False)\n",
        "\n",
        "# Visualisasi\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.barplot(data=komplain_produk_sorted.head(10), x='complaints_count', y='product_category_name', palette='Reds_r')\n",
        "plt.title('Produk - produk yang sering di komplain')\n",
        "plt.xlabel('Jumlah Komplain')\n",
        "plt.ylabel('Category')\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DgHI7CiU8DC2"
      },
      "source": [
        "### Pertanyaan 2:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 94,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 580
        },
        "id": "Go0lCsvO8DC2",
        "outputId": "bb284e1d-3b73-480f-9713-41e217ec6c5d"
      },
      "outputs": [
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 1200x600 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# Mengambil data Bulanan\n",
        "orders['order_purchase_month'] = orders['order_purchase_timestamp'].dt.to_period('M')\n",
        "monthly_sales = orders.groupby('order_purchase_month').size()\n",
        "\n",
        "# Visualisasi\n",
        "plt.figure(figsize=(12, 6))\n",
        "monthly_sales.plot()\n",
        "plt.title('Penjualan dalam beberapa bulan terakhir')\n",
        "plt.ylabel('Jumlah Order')\n",
        "plt.xlabel('Bulan')\n",
        "plt.grid(True)\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_0-36BDLklRg"
      },
      "source": [
        "**Insight:**\n",
        "- Pertanyaan 1, ditemukan produk dengan rating terendah dengan asumsi /benchmark rating rendah adalah kurang dari atau samadengan 2\n",
        "- Pertanyaan 2, Mengambil data bulan dari kolom orders_purchase_timestamp yang telah dikonversi kedalam bentuk datetime."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9y4VUsmcYNZ5"
      },
      "source": [
        "## Analisis Lanjutan (Opsional)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "iWhnzsJGYUCO"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_WeHlCeX8DC2"
      },
      "source": [
        "## Conclusion"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ZTcyR48Y8DC2"
      },
      "source": [
        "- Untuk pertanyaan 1 dapat disimpulkan bahwa ferramentas_jardim (peralatan perkebunan) adalah produk yang paling sering dikeluhkan, diikuti oleh cama_mesa_banho. Kategori informatica_acessorios memiliki jumlah komplain paling sedikit.\n",
        "\n",
        "- Grafik penjualan memberikan gambaran umum penjualan perusahaan Olits dalam beberapa bulan terakhir. Terlihat adanya uptren penjualan dari pertengahan tahun 2017 sampai awal tahun 2018. Tapi setelah mencapai puncaknya pada bulan Oktober 2017, penjualan mengalami penurunan yang cukup tajam pada akhir tahun 2018."
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.12.1"
    },
    "orig_nbformat": 4,
    "vscode": {
      "interpreter": {
        "hash": "972b3bf27e332e87b5379f2791f6ef9dfc79c71018c370b0d7423235e20fe4d7"
      }
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
